# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node

# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions
# See sample at https://levelup.gitconnected.com/deploying-a-node-app-to-aws-elastic-beanstalk-using-github-actions-d64c7e486701

name: Droplet DropService API Node.js CI

on:
  push:
    branches: [ master, staging ]

jobs:
  # run_test:
  #   runs-on: ubuntu-18.04
  #   if: ${{ github.event_name == 'pull_request' && github.event.action == 'unassigned' }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkoutv2
      
  #     - name: Run tests
  #       run: npm run test

  deploy_master:
    runs-on: ubuntu-18.04
    if: ${{ github.ref == 'refs/heads/master' }}
    env:
      SERVER_IP: ${{ secrets.SERVER_IP_MASTER }}
      SSH_USERNAME: ${{ secrets.SSH_USERNAME_MASTER }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY_MASTER }}
      PORT: ${{ secrets.PORT_MASTER }}
      DB_HOSTNAME: ${{ secrets.DB_HOSTNAME_MASTER }}
      DB_USERNAME: ${{ secrets.DB_USERNAME_MASTER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD_MASTER }}
      DB_DATABASE: ${{ secrets.DB_DATABASE_MASTER }}
      DB_PORT: ${{ secrets.DB_PORT_MASTER }}

      GOOGLE_PROJECT_ID: ${{ secrets.GOOGLE_PROJECT_ID_MASTER }}
      GOOGLE_BUCKET_NAME: ${{ secrets.GOOGLE_BUCKET_NAME_MASTER }}
      GOOGLE_KEYFILE: ${{ secrets.GOOGLE_KEYFILE_MASTER }}

      FIREBASE_BUCKET_NAME: ${{ secrets.FIREBASE_BUCKET_NAME_MASTER }}
      FIREBASE_KEYFILE: ${{ secrets.FIREBASE_KEYFILE_MASTER }}
      SENTRY_DNS: ${{ secrets.SENTRY_DNS_MASTER }}
    steps:
      - name: SSH into the VM
        uses: fifsky/ssh-action@master
        if: ${{ success() }}
        with:
          # VM is Ubuntu 18.04
          command: |
            sudo apt update
            sudo apt-get update

            sudo apt-get install -y python3.6=3.6.9-1~18.04ubuntu1.4 python3-pip=9.0.1-2.3~ubuntu1.18.04.4
            sudo pip3 install -U pip==21.1.2

            sudo apt-get install -y git=1:2.17.1-1ubuntu0.8 nginx=1.14.0-0ubuntu1.9 lame=3.100-2 ffmpeg=7:3.4.8-0ubuntu0.2
            curl -sL https://deb.nodesource.com/setup_14.x | sudo bash -
            sudo apt-get -y install nodejs=14.17.0-1nodesource1

            test ! -e ~/drop-service && mkdir ~/drop-service
            cd ~/drop-service
            git checkout master | git pull origin master

            cat << EOF > .env
            NODE_ENV=production
            PORT=${{ env.PORT }}
            DB_HOSTNAME=${{ env.DB_HOSTNAME }}
            DB_USERNAME=${{ env.DB_USERNAME }}
            DB_PASSWORD=${{ env.DB_PASSWORD }}
            DB_DATABASE=${{ env.DB_DATABASE }}
            DB_PORT=${{ env.DB_PORT }}

            GOOGLE_PROJECT_ID=${{ env.GOOGLE_PROJECT_ID }}
            GOOGLE_BUCKET_NAME=${{ env.GOOGLE_BUCKET_NAME }}
            GOOGLE_KEYFILE=${{ env.GOOGLE_KEYFILE }}

            FIREBASE_BUCKET_NAME=${{ env.FIREBASE_BUCKET_NAME }}
            FIREBASE_KEYFILE=${{ env.FIREBASE_KEYFILE }}

            SENTRY_DNS=${{ env.SENTRY_DNS }}
            EOF

            sudo npm install --global yarn

            sudo yarn production:prep:install
            sudo yarn install
            sudo yarn production
          host: ${{ env.SERVER_IP }}
          user: ${{ env.SSH_USERNAME }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          args: -tt

  deploy_staging:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/staging' }}
    env: 
      SERVER_IP: ${{ secrets.SERVER_IP_STAGING }}
      SSH_USERNAME: ${{ secrets.SSH_USERNAME_STAGING }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY_STAGING }}
      PORT: ${{ secrets.PORT_STAGING }}
      DB_HOSTNAME: ${{ secrets.DB_HOSTNAME_STAGING }}
      DB_USERNAME: ${{ secrets.DB_USERNAME_STAGING }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD_STAGING }}
      DB_DATABASE: ${{ secrets.DB_DATABASE_STAGING }}
      DB_PORT: ${{ secrets.DB_PORT_STAGING }}

      GOOGLE_PROJECT_ID: ${{ secrets.GOOGLE_PROJECT_ID_STAGING }}
      GOOGLE_BUCKET_NAME: ${{ secrets.GOOGLE_BUCKET_NAME_STAGING }}
      GOOGLE_KEYFILE: ${{ secrets.GOOGLE_KEYFILE_STAGING }}

      FIREBASE_BUCKET_NAME: ${{ secrets.FIREBASE_BUCKET_NAME_STAGING }}
      FIREBASE_KEYFILE: ${{ secrets.FIREBASE_KEYFILE_STAGING }}
      SENTRY_DNS: ${{ secrets.SENTRY_DNS_STAGING }}
    steps:
      - name: SSH into the VM
        uses: fifsky/ssh-action@master
        if: ${{ success() }}
        with:
          # VM is Ubuntu 18.04
          command: |
            sudo apt update
            sudo apt-get update

            sudo apt-get install -y python3.6=3.6.9-1~18.04ubuntu1.4 python3-pip=9.0.1-2.3~ubuntu1.18.04.4
            sudo pip3 install -U pip==21.1.2

            sudo apt-get install -y git=1:2.17.1-1ubuntu0.8 nginx=1.14.0-0ubuntu1.9 lame=3.100-2 ffmpeg=7:3.4.8-0ubuntu0.2
            curl -sL https://deb.nodesource.com/setup_14.x | sudo bash -
            sudo apt-get -y install nodejs=14.17.0-1nodesource1

            test ! -e ~/drop-service && mkdir ~/drop-service
            cd ~/drop-service
            git checkout staging | git pull origin staging

            cat << EOF > .env
            NODE_ENV=staging
            PORT=${{ env.PORT }}
            DB_HOSTNAME=${{ env.DB_HOSTNAME }}
            DB_USERNAME=${{ env.DB_USERNAME }}
            DB_PASSWORD=${{ env.DB_PASSWORD }}
            DB_DATABASE=${{ env.DB_DATABASE }}
            DB_PORT=${{ env.DB_PORT }}

            GOOGLE_PROJECT_ID=${{ env.GOOGLE_PROJECT_ID }}
            GOOGLE_BUCKET_NAME=${{ env.GOOGLE_BUCKET_NAME }}
            GOOGLE_KEYFILE=${{ env.GOOGLE_KEYFILE }}

            FIREBASE_BUCKET_NAME=${{ env.FIREBASE_BUCKET_NAME }}
            FIREBASE_KEYFILE=${{ env.FIREBASE_KEYFILE }}

            SENTRY_DNS=${{ env.SENTRY_DNS }}
            EOF

            sudo npm install --global yarn

            sudo yarn production:prep:install
            sudo yarn install
            sudo yarn production
          host: ${{ env.SERVER_IP }}
          user: ${{ env.SSH_USERNAME }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          args: -tt
