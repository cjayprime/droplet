# This workflow will do an install of node dependencies, and build the source code

name: Droplet DropService API Node.js CI

on:
  push:
    branches: [ master, staging ]

jobs:
  # run_test:
  #   runs-on: ubuntu-18.04
  #   if: ${{ github.event_name == 'pull_request' && github.event.action == 'unassigned' }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkoutv2
      
  #     - name: Run tests
  #       run: npm run test

  deploy_master:
    runs-on: ubuntu-18.04
    if: ${{ github.ref == 'refs/heads/master' }}
    env:
      SERVER_IP: ${{ secrets.SERVER_IP_MASTER }}
      SSH_USERNAME: ${{ secrets.SSH_USERNAME_MASTER }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY_MASTER }}
      PORT: ${{ secrets.PORT_MASTER }}
      DB_HOSTNAME: ${{ secrets.DB_HOSTNAME_MASTER }}
      DB_USERNAME: ${{ secrets.DB_USERNAME_MASTER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD_MASTER }}
      DB_DATABASE: ${{ secrets.DB_DATABASE_MASTER }}
      DB_PORT: ${{ secrets.DB_PORT_MASTER }}
      TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID_MASTER }}
      TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN_MASTER }}
      TWILIO_NUMBER: ${{ secrets.TWILIO_NUMBER_MASTER }}

      GOOGLE_PROJECT_ID: ${{ secrets.GOOGLE_PROJECT_ID_MASTER }}
      GOOGLE_BUCKET_NAME: ${{ secrets.GOOGLE_BUCKET_NAME_MASTER }}
      GOOGLE_KEYFILE: ${{ secrets.GOOGLE_KEYFILE_MASTER }}

      FIREBASE_BUCKET_NAME: ${{ secrets.FIREBASE_BUCKET_NAME_MASTER }}
      FIREBASE_KEYFILE: ${{ secrets.FIREBASE_KEYFILE_MASTER }}
      SENTRY_DNS: ${{ secrets.SENTRY_DNS_MASTER }}
    steps:
      - name: Install Python3
        uses: fifsky/ssh-action@master
        if: ${{ success() }}
        with:
          # VM is Ubuntu 18.04
          command: |
            sudo apt update
            sudo apt-get update
            sudo apt-get install -y python3.6=3.6.9-1~18.04ubuntu1.4 python3-pip=9.0.1-2.3~ubuntu1.18.04.4
            sudo pip3 install -U pip==21.1.2
          host: ${{ env.SERVER_IP }}
          user: ${{ env.SSH_USERNAME }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          args: "-T"

      - name: Install Server Dependencies
        uses: fifsky/ssh-action@master
        if: ${{ success() }}
        with:
          command: |
            sudo apt update
            sudo apt-get update
            sudo apt-get install -y git=1:2.17.1-1ubuntu0.8 nginx=1.14.0-0ubuntu1.9 lame=3.100-2 ffmpeg=7:3.4.8-0ubuntu0.2
            curl -sL https://deb.nodesource.com/setup_14.x | sudo bash -
            sudo apt-get -y install nodejs=14.17.0-1nodesource1
            sudo apt install build-essential
          host: ${{ env.SERVER_IP }}
          user: ${{ env.SSH_USERNAME }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          args: "-T"

      - name: Checkout and Pull Changes
        uses: fifsky/ssh-action@master
        if: ${{ success() }}
        with:
          command: |
            cd ~/drop-service
            git stash && git stash drop
            git checkout master | git pull origin master
          host: ${{ env.SERVER_IP }}
          user: ${{ env.SSH_USERNAME }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          args: "-T"

      - name: Load Environment Variables
        uses: fifsky/ssh-action@master
        if: ${{ success() }}
        with:
          command: |
            cd ~/drop-service

            cat << EOF > .env
            NODE_ENV=production
            PORT=${{ env.PORT }}
            DB_HOSTNAME=${{ env.DB_HOSTNAME }}
            DB_USERNAME=${{ env.DB_USERNAME }}
            DB_PASSWORD=${{ env.DB_PASSWORD }}
            DB_DATABASE=${{ env.DB_DATABASE }}
            DB_PORT=${{ env.DB_PORT }}

            TWILIO_ACCOUNT_SID=${{ env.TWILIO_ACCOUNT_SID }}
            TWILIO_AUTH_TOKEN=${{ env.TWILIO_AUTH_TOKEN }}
            TWILIO_NUMBER=${{ env.TWILIO_NUMBER }}

            GOOGLE_PROJECT_ID=${{ env.GOOGLE_PROJECT_ID }}
            GOOGLE_BUCKET_NAME=${{ env.GOOGLE_BUCKET_NAME }}
            GOOGLE_KEYFILE=${{ env.GOOGLE_KEYFILE }}

            FIREBASE_BUCKET_NAME=${{ env.FIREBASE_BUCKET_NAME }}
            FIREBASE_KEYFILE=${{ env.FIREBASE_KEYFILE }}

            SENTRY_DNS=${{ env.SENTRY_DNS }}
            EOF
          host: ${{ env.SERVER_IP }}
          user: ${{ env.SSH_USERNAME }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          args: "-T"

      - name: Prepare Application Installation
        uses: fifsky/ssh-action@master
        if: ${{ success() }}
        with:
          command: |
            cd ~/drop-service
            sudo npm install --global yarn@1.22.10

            sudo yarn production:prep:install
          host: ${{ env.SERVER_IP }}
          user: ${{ env.SSH_USERNAME }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          args: "-T"

      - name: Install Application Dependencies
        uses: fifsky/ssh-action@master
        if: ${{ success() }}
        with:
          command: |
            cd ~/drop-service
            sudo yarn install
          host: ${{ env.SERVER_IP }}
          user: ${{ env.SSH_USERNAME }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          args: "-T"


      - name: Launch Application
        uses: fifsky/ssh-action@master
        if: ${{ success() }}
        with:
          command: |
            cd ~/drop-service
            sudo yarn production
          host: ${{ env.SERVER_IP }}
          user: ${{ env.SSH_USERNAME }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          args: "-T"
    
    
      - name: Sleep for 30 seconds
        run: sleep 30s
        shell: bash


      - name: Verify Application (Internal)
        uses: fifsky/ssh-action@master
        if: ${{ success() }}
        with:
          command: |
            curl --fail http://localhost:${{ env.PORT }}/health
          host: ${{ env.SERVER_IP }}
          user: ${{ env.SSH_USERNAME }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          args: "-T"


      - name: Verify Application (External)
        if: ${{ success() }}
        run: curl --fail http://${{ env.SERVER_IP }}:80/health





          
  deploy_staging:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/staging' }}
    env: 
      SERVER_IP: ${{ secrets.SERVER_IP_STAGING }}
      SSH_USERNAME: ${{ secrets.SSH_USERNAME_STAGING }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY_STAGING }}
      PORT: ${{ secrets.PORT_STAGING }}
      DB_HOSTNAME: ${{ secrets.DB_HOSTNAME_STAGING }}
      DB_USERNAME: ${{ secrets.DB_USERNAME_STAGING }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD_STAGING }}
      DB_DATABASE: ${{ secrets.DB_DATABASE_STAGING }}
      DB_PORT: ${{ secrets.DB_PORT_STAGING }}
      TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID_STAGING }}
      TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN_STAGING }}
      TWILIO_NUMBER: ${{ secrets.TWILIO_NUMBER_STAGING }}

      GOOGLE_PROJECT_ID: ${{ secrets.GOOGLE_PROJECT_ID_STAGING }}
      GOOGLE_BUCKET_NAME: ${{ secrets.GOOGLE_BUCKET_NAME_STAGING }}
      GOOGLE_KEYFILE: ${{ secrets.GOOGLE_KEYFILE_STAGING }}

      FIREBASE_BUCKET_NAME: ${{ secrets.FIREBASE_BUCKET_NAME_STAGING }}
      FIREBASE_KEYFILE: ${{ secrets.FIREBASE_KEYFILE_STAGING }}
      SENTRY_DNS: ${{ secrets.SENTRY_DNS_STAGING }}
    steps:
      - name: Install Python3
        uses: fifsky/ssh-action@master
        if: ${{ success() }}
        with:
          # VM is Ubuntu 18.04
          command: |
            sudo apt update
            sudo apt-get update
            sudo apt-get install -y python3.6=3.6.9-1~18.04ubuntu1.4 python3-pip=9.0.1-2.3~ubuntu1.18.04.4
            sudo pip3 install -U pip==21.1.2
          host: ${{ env.SERVER_IP }}
          user: ${{ env.SSH_USERNAME }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          args: "-T"

      - name: Install Server Dependencies
        uses: fifsky/ssh-action@master
        if: ${{ success() }}
        with:
          command: |
            sudo apt update
            sudo apt-get update
            sudo apt-get install -y git=1:2.17.1-1ubuntu0.8 nginx=1.14.0-0ubuntu1.9 lame=3.100-2 ffmpeg=7:3.4.8-0ubuntu0.2
            curl -sL https://deb.nodesource.com/setup_14.x | sudo bash -
            sudo apt-get -y install nodejs=14.17.0-1nodesource1
            sudo apt install build-essential
          host: ${{ env.SERVER_IP }}
          user: ${{ env.SSH_USERNAME }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          args: "-T"

      - name: Checkout and Pull Changes
        uses: fifsky/ssh-action@master
        if: ${{ success() }}
        with:
          command: |
            cd ~/drop-service
            git stash && git stash drop
            git checkout staging | git pull origin staging
          host: ${{ env.SERVER_IP }}
          user: ${{ env.SSH_USERNAME }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          args: "-T"

      - name: Load Environment Variables
        uses: fifsky/ssh-action@master
        if: ${{ success() }}
        with:
          command: |
            cd ~/drop-service

            cat << EOF > .env
            NODE_ENV=staging
            PORT=${{ env.PORT }}
            DB_HOSTNAME=${{ env.DB_HOSTNAME }}
            DB_USERNAME=${{ env.DB_USERNAME }}
            DB_PASSWORD=${{ env.DB_PASSWORD }}
            DB_DATABASE=${{ env.DB_DATABASE }}
            DB_PORT=${{ env.DB_PORT }}

            TWILIO_ACCOUNT_SID=${{ env.TWILIO_ACCOUNT_SID }}
            TWILIO_AUTH_TOKEN=${{ env.TWILIO_AUTH_TOKEN }}
            TWILIO_NUMBER=${{ env.TWILIO_NUMBER }}

            GOOGLE_PROJECT_ID=${{ env.GOOGLE_PROJECT_ID }}
            GOOGLE_BUCKET_NAME=${{ env.GOOGLE_BUCKET_NAME }}
            GOOGLE_KEYFILE=${{ env.GOOGLE_KEYFILE }}

            FIREBASE_BUCKET_NAME=${{ env.FIREBASE_BUCKET_NAME }}
            FIREBASE_KEYFILE=${{ env.FIREBASE_KEYFILE }}

            SENTRY_DNS=${{ env.SENTRY_DNS }}
            EOF
          host: ${{ env.SERVER_IP }}
          user: ${{ env.SSH_USERNAME }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          args: "-T"

      - name: Prepare Application Installation
        uses: fifsky/ssh-action@master
        if: ${{ success() }}
        with:
          command: |
            cd ~/drop-service
            sudo npm install --global yarn@1.22.10

            sudo yarn production:prep:install
          host: ${{ env.SERVER_IP }}
          user: ${{ env.SSH_USERNAME }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          args: "-T"

      - name: Install Application Dependencies
        uses: fifsky/ssh-action@master
        if: ${{ success() }}
        with:
          command: |
            cd ~/drop-service
            sudo yarn install
          host: ${{ env.SERVER_IP }}
          user: ${{ env.SSH_USERNAME }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          args: "-T"


      - name: Launch Application
        uses: fifsky/ssh-action@master
        if: ${{ success() }}
        with:
          command: |
            cd ~/drop-service
            sudo yarn production
          host: ${{ env.SERVER_IP }}
          user: ${{ env.SSH_USERNAME }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          args: "-T"
    
    
      - name: Sleep for 30 seconds
        run: sleep 30s
        shell: bash


      - name: Verify Application (Internal)
        uses: fifsky/ssh-action@master
        if: ${{ success() }}
        with:
          command: |
            curl --fail http://localhost:${{ env.PORT }}/health
          host: ${{ env.SERVER_IP }}
          user: ${{ env.SSH_USERNAME }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          args: "-T"


      - name: Verify Application (External)
        if: ${{ success() }}
        run: curl --fail http://${{ env.SERVER_IP }}:80/health

      - name: 'ubuntu'
        uses: fifsky/ssh-action@master
        with: 
          args: ['sh', '-c', 'sysctl fs.inotify.max_user_watches=524288'] 
